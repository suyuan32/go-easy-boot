// Code generated by goctl. DO NOT EDIT!
// Source: system.proto

package server

import (
	"context"

	"system/rpc/internal/logic"
	"system/rpc/internal/svc"
	"system/rpc/types/system"
)

type SystemServer struct {
	svcCtx *svc.ServiceContext
	system.UnimplementedSystemServer
}

func NewSystemServer(svcCtx *svc.ServiceContext) *SystemServer {
	return &SystemServer{
		svcCtx: svcCtx,
	}
}

//  user service
func (s *SystemServer) Login(ctx context.Context, in *system.LoginReq) (*system.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *SystemServer) ChangePassword(ctx context.Context, in *system.ChangePasswordReq) (*system.BaseResp, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

func (s *SystemServer) CreateUser(ctx context.Context, in *system.RegisterReq) (*system.BaseResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *SystemServer) UpdateUser(ctx context.Context, in *system.UpdateUserInfoReq) (*system.BaseResp, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *SystemServer) GetUserById(ctx context.Context, in *system.IDReq) (*system.UserInfoResp, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *SystemServer) GetUserList(ctx context.Context, in *system.PageInfoReq) (*system.UserInfoListResp, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

//  menu service
func (s *SystemServer) CreateMenu(ctx context.Context, in *system.CreateMenuReq) (*system.BaseResp, error) {
	l := logic.NewCreateMenuLogic(ctx, s.svcCtx)
	return l.CreateMenu(in)
}

func (s *SystemServer) UpdateMenu(ctx context.Context, in *system.UpdateMenuReq) (*system.BaseResp, error) {
	l := logic.NewUpdateMenuLogic(ctx, s.svcCtx)
	return l.UpdateMenu(in)
}

func (s *SystemServer) DeleteMenu(ctx context.Context, in *system.IDReq) (*system.BaseResp, error) {
	l := logic.NewDeleteMenuLogic(ctx, s.svcCtx)
	return l.DeleteMenu(in)
}

func (s *SystemServer) GetMenuById(ctx context.Context, in *system.IDReq) (*system.MenuInfo, error) {
	l := logic.NewGetMenuByIdLogic(ctx, s.svcCtx)
	return l.GetMenuById(in)
}

func (s *SystemServer) GetMenuList(ctx context.Context, in *system.PageInfoReq) (*system.MenuInfoList, error) {
	l := logic.NewGetMenuListLogic(ctx, s.svcCtx)
	return l.GetMenuList(in)
}

func (s *SystemServer) CreateMenuParam(ctx context.Context, in *system.CreateMenuParamReq) (*system.BaseResp, error) {
	l := logic.NewCreateMenuParamLogic(ctx, s.svcCtx)
	return l.CreateMenuParam(in)
}

func (s *SystemServer) UpdateMenuParam(ctx context.Context, in *system.UpdateMenuParamReq) (*system.BaseResp, error) {
	l := logic.NewUpdateMenuParamLogic(ctx, s.svcCtx)
	return l.UpdateMenuParam(in)
}

func (s *SystemServer) DeleteMenuParam(ctx context.Context, in *system.IDReq) (*system.BaseResp, error) {
	l := logic.NewDeleteMenuParamLogic(ctx, s.svcCtx)
	return l.DeleteMenuParam(in)
}

func (s *SystemServer) GetMenuParamById(ctx context.Context, in *system.IDReq) (*system.MenuParamResp, error) {
	l := logic.NewGetMenuParamByIdLogic(ctx, s.svcCtx)
	return l.GetMenuParamById(in)
}

func (s *SystemServer) GeMenuParamListById(ctx context.Context, in *system.IDReq) (*system.MenuParamListResp, error) {
	l := logic.NewGeMenuParamListByIdLogic(ctx, s.svcCtx)
	return l.GeMenuParamListById(in)
}

// menu authority management
func (s *SystemServer) CreateMenuAuthority(ctx context.Context, in *system.CreateMenuAuthorityReq) (*system.BaseResp, error) {
	l := logic.NewCreateMenuAuthorityLogic(ctx, s.svcCtx)
	return l.CreateMenuAuthority(in)
}

func (s *SystemServer) UpdateMenuAuthority(ctx context.Context, in *system.UpdateMenuAuthorityReq) (*system.BaseResp, error) {
	l := logic.NewUpdateMenuAuthorityLogic(ctx, s.svcCtx)
	return l.UpdateMenuAuthority(in)
}

func (s *SystemServer) DeleteMenuAuthority(ctx context.Context, in *system.IDReq) (*system.BaseResp, error) {
	l := logic.NewDeleteMenuAuthorityLogic(ctx, s.svcCtx)
	return l.DeleteMenuAuthority(in)
}

func (s *SystemServer) GetMenuAuthorityById(ctx context.Context, in *system.IDReq) (*system.MenuAuthorityResp, error) {
	l := logic.NewGetMenuAuthorityByIdLogic(ctx, s.svcCtx)
	return l.GetMenuAuthorityById(in)
}

func (s *SystemServer) GetMenuAuthorityList(ctx context.Context, in *system.PageInfoReq) (*system.MenuAuthorityListResp, error) {
	l := logic.NewGetMenuAuthorityListLogic(ctx, s.svcCtx)
	return l.GetMenuAuthorityList(in)
}

//  authority service
func (s *SystemServer) CreateAuthority(ctx context.Context, in *system.CreateAuthorityReq) (*system.BaseResp, error) {
	l := logic.NewCreateAuthorityLogic(ctx, s.svcCtx)
	return l.CreateAuthority(in)
}

func (s *SystemServer) UpdateAuthority(ctx context.Context, in *system.CreateAuthorityReq) (*system.BaseResp, error) {
	l := logic.NewUpdateAuthorityLogic(ctx, s.svcCtx)
	return l.UpdateAuthority(in)
}

func (s *SystemServer) DeleteAuthority(ctx context.Context, in *system.IDReq) (*system.BaseResp, error) {
	l := logic.NewDeleteAuthorityLogic(ctx, s.svcCtx)
	return l.DeleteAuthority(in)
}

func (s *SystemServer) GetAuthorityById(ctx context.Context, in *system.IDReq) (*system.AuthorityResp, error) {
	l := logic.NewGetAuthorityByIdLogic(ctx, s.svcCtx)
	return l.GetAuthorityById(in)
}

func (s *SystemServer) GetAuthorityList(ctx context.Context, in *system.PageInfoReq) (*system.AuthorityListResp, error) {
	l := logic.NewGetAuthorityListLogic(ctx, s.svcCtx)
	return l.GetAuthorityList(in)
}

//  casbin service
func (s *SystemServer) UpdatePolicy(ctx context.Context, in *system.UpdatePolicyReq) (*system.BaseResp, error) {
	l := logic.NewUpdatePolicyLogic(ctx, s.svcCtx)
	return l.UpdatePolicy(in)
}

func (s *SystemServer) CreatePolicy(ctx context.Context, in *system.CreatePolicyReq) (*system.BaseResp, error) {
	l := logic.NewCreatePolicyLogic(ctx, s.svcCtx)
	return l.CreatePolicy(in)
}

func (s *SystemServer) DeletePolicy(ctx context.Context, in *system.IDReq) (*system.BaseResp, error) {
	l := logic.NewDeletePolicyLogic(ctx, s.svcCtx)
	return l.DeletePolicy(in)
}

func (s *SystemServer) GetPolicyByAuthorityId(ctx context.Context, in *system.IDReq) (*system.UpdatePolicyReq, error) {
	l := logic.NewGetPolicyByAuthorityIdLogic(ctx, s.svcCtx)
	return l.GetPolicyByAuthorityId(in)
}
