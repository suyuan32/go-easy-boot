// Code generated by goctl. DO NOT EDIT!
// Source: system.proto

package system

import (
	"context"

	"system/rpc/types/system"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp           = system.BaseResp
	ChangePasswordReq  = system.ChangePasswordReq
	CreateMenuParamReq = system.CreateMenuParamReq
	CreateMenuReq      = system.CreateMenuReq
	CreateMenuRoleReq  = system.CreateMenuRoleReq
	CreatePolicyReq    = system.CreatePolicyReq
	CreateRoleReq      = system.CreateRoleReq
	IDReq              = system.IDReq
	LoginReq           = system.LoginReq
	LoginResp          = system.LoginResp
	MenuInfo           = system.MenuInfo
	MenuInfoList       = system.MenuInfoList
	MenuParamListResp  = system.MenuParamListResp
	MenuParamResp      = system.MenuParamResp
	MenuRoleListResp   = system.MenuRoleListResp
	MenuRoleResp       = system.MenuRoleResp
	PageInfoReq        = system.PageInfoReq
	PolicyPartInfo     = system.PolicyPartInfo
	RegisterReq        = system.RegisterReq
	RoleListResp       = system.RoleListResp
	RoleResp           = system.RoleResp
	UpdateMenuParamReq = system.UpdateMenuParamReq
	UpdateMenuReq      = system.UpdateMenuReq
	UpdateMenuRoleReq  = system.UpdateMenuRoleReq
	UpdatePolicyReq    = system.UpdatePolicyReq
	UpdateRoleReq      = system.UpdateRoleReq
	UpdateUserInfoReq  = system.UpdateUserInfoReq
	UserInfoListResp   = system.UserInfoListResp
	UserInfoResp       = system.UserInfoResp

	System interface {
		//  user service
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseResp, error)
		CreateUser(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetUserById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		GetUserList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*UserInfoListResp, error)
		//  menu service
		CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error)
		GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
		CreateMenuParam(ctx context.Context, in *CreateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateMenuParam(ctx context.Context, in *UpdateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenuParam(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuParamById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamResp, error)
		GeMenuParamListById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamListResp, error)
		// menu role management
		CreateMenuRole(ctx context.Context, in *CreateMenuRoleReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenuRole(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuRoleResp, error)
		GetMenuRoleList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuRoleListResp, error)
		//  role service
		CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteRole(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleResp, error)
		GetRoleList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*RoleListResp, error)
		//  casbin service
		UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*BaseResp, error)
		CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeletePolicy(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetPolicyByRoleId(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UpdatePolicyReq, error)
	}

	defaultSystem struct {
		cli zrpc.Client
	}
)

func NewSystem(cli zrpc.Client) System {
	return &defaultSystem{
		cli: cli,
	}
}

//  user service
func (m *defaultSystem) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultSystem) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

func (m *defaultSystem) CreateUser(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultSystem) UpdateUser(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultSystem) GetUserById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultSystem) GetUserList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*UserInfoListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

//  menu service
func (m *defaultSystem) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

func (m *defaultSystem) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

func (m *defaultSystem) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteMenu(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuById(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuList(ctx, in, opts...)
}

func (m *defaultSystem) CreateMenuParam(ctx context.Context, in *CreateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateMenuParam(ctx, in, opts...)
}

func (m *defaultSystem) UpdateMenuParam(ctx context.Context, in *UpdateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateMenuParam(ctx, in, opts...)
}

func (m *defaultSystem) DeleteMenuParam(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteMenuParam(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuParamById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuParamById(ctx, in, opts...)
}

func (m *defaultSystem) GeMenuParamListById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GeMenuParamListById(ctx, in, opts...)
}

// menu role management
func (m *defaultSystem) CreateMenuRole(ctx context.Context, in *CreateMenuRoleReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateMenuRole(ctx, in, opts...)
}

func (m *defaultSystem) UpdateMenuRole(ctx context.Context, in *UpdateMenuRoleReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateMenuRole(ctx, in, opts...)
}

func (m *defaultSystem) DeleteMenuRole(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteMenuRole(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuRoleResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuRoleById(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuRoleList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuRoleListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuRoleList(ctx, in, opts...)
}

//  role service
func (m *defaultSystem) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

func (m *defaultSystem) UpdateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

func (m *defaultSystem) DeleteRole(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

func (m *defaultSystem) GetRoleById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*RoleResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetRoleById(ctx, in, opts...)
}

func (m *defaultSystem) GetRoleList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetRoleList(ctx, in, opts...)
}

//  casbin service
func (m *defaultSystem) UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdatePolicy(ctx, in, opts...)
}

func (m *defaultSystem) CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreatePolicy(ctx, in, opts...)
}

func (m *defaultSystem) DeletePolicy(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeletePolicy(ctx, in, opts...)
}

func (m *defaultSystem) GetPolicyByRoleId(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UpdatePolicyReq, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetPolicyByRoleId(ctx, in, opts...)
}
