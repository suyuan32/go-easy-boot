// Code generated by goctl. DO NOT EDIT!
// Source: system.proto

package system

import (
	"context"

	"system/rpc/types/system"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthorityListResp      = system.AuthorityListResp
	AuthorityResp          = system.AuthorityResp
	BaseResp               = system.BaseResp
	ChangePasswordReq      = system.ChangePasswordReq
	CreateAuthorityReq     = system.CreateAuthorityReq
	CreateMenuAuthorityReq = system.CreateMenuAuthorityReq
	CreateMenuParamReq     = system.CreateMenuParamReq
	CreateMenuReq          = system.CreateMenuReq
	IDReq                  = system.IDReq
	LoginReq               = system.LoginReq
	LoginResp              = system.LoginResp
	MenuAuthorityListResp  = system.MenuAuthorityListResp
	MenuAuthorityResp      = system.MenuAuthorityResp
	MenuInfo               = system.MenuInfo
	MenuInfoList           = system.MenuInfoList
	MenuParamListResp      = system.MenuParamListResp
	MenuParamResp          = system.MenuParamResp
	PageInfoReq            = system.PageInfoReq
	RegisterReq            = system.RegisterReq
	UpdateAuthorityReq     = system.UpdateAuthorityReq
	UpdateMenuAuthorityReq = system.UpdateMenuAuthorityReq
	UpdateMenuParamReq     = system.UpdateMenuParamReq
	UpdateMenuReq          = system.UpdateMenuReq
	UpdateUserInfoReq      = system.UpdateUserInfoReq
	UserInfoListResp       = system.UserInfoListResp
	UserInfoResp           = system.UserInfoResp

	System interface {
		//  user service
		ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseResp, error)
		CreateUser(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetUserById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		GetUserList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*UserInfoListResp, error)
		//  menu service
		CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error)
		GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
		CreateMenuParam(ctx context.Context, in *CreateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateMenuParam(ctx context.Context, in *UpdateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenuParam(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuParamById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamResp, error)
		GeMenuParamListById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamListResp, error)
		// menu authority management
		CreateMenuAuthority(ctx context.Context, in *CreateMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateMenuAuthority(ctx context.Context, in *UpdateMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuAuthorityById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuAuthorityResp, error)
		GetMenuAuthorityList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuAuthorityListResp, error)
		//  authority service
		CreateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetAuthorityById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*AuthorityResp, error)
		GetAuthorityList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*AuthorityListResp, error)
	}

	defaultSystem struct {
		cli zrpc.Client
	}
)

func NewSystem(cli zrpc.Client) System {
	return &defaultSystem{
		cli: cli,
	}
}

//  user service
func (m *defaultSystem) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

func (m *defaultSystem) CreateUser(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultSystem) UpdateUser(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultSystem) GetUserById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultSystem) GetUserList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*UserInfoListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

//  menu service
func (m *defaultSystem) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

func (m *defaultSystem) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

func (m *defaultSystem) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteMenu(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfo, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuById(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuList(ctx, in, opts...)
}

func (m *defaultSystem) CreateMenuParam(ctx context.Context, in *CreateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateMenuParam(ctx, in, opts...)
}

func (m *defaultSystem) UpdateMenuParam(ctx context.Context, in *UpdateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateMenuParam(ctx, in, opts...)
}

func (m *defaultSystem) DeleteMenuParam(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteMenuParam(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuParamById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuParamById(ctx, in, opts...)
}

func (m *defaultSystem) GeMenuParamListById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GeMenuParamListById(ctx, in, opts...)
}

// menu authority management
func (m *defaultSystem) CreateMenuAuthority(ctx context.Context, in *CreateMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateMenuAuthority(ctx, in, opts...)
}

func (m *defaultSystem) UpdateMenuAuthority(ctx context.Context, in *UpdateMenuAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateMenuAuthority(ctx, in, opts...)
}

func (m *defaultSystem) DeleteMenuAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteMenuAuthority(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuAuthorityById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuAuthorityResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuAuthorityById(ctx, in, opts...)
}

func (m *defaultSystem) GetMenuAuthorityList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuAuthorityListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetMenuAuthorityList(ctx, in, opts...)
}

//  authority service
func (m *defaultSystem) CreateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.CreateAuthority(ctx, in, opts...)
}

func (m *defaultSystem) UpdateAuthority(ctx context.Context, in *CreateAuthorityReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.UpdateAuthority(ctx, in, opts...)
}

func (m *defaultSystem) DeleteAuthority(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.DeleteAuthority(ctx, in, opts...)
}

func (m *defaultSystem) GetAuthorityById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*AuthorityResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetAuthorityById(ctx, in, opts...)
}

func (m *defaultSystem) GetAuthorityList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*AuthorityListResp, error) {
	client := system.NewSystemClient(m.cli.Conn())
	return client.GetAuthorityList(ctx, in, opts...)
}
